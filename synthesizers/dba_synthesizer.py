import random

import torch
import torchvision
from torchvision.transforms import transforms, functional

from synthesizers.synthesizer import Synthesizer
from tasks.task import Task

transform_to_image = transforms.ToPILImage()
transform_to_tensor = transforms.ToTensor()


class DBASynthesizer(Synthesizer):
	pattern_tensor = {
		# for cifar and tiny-imagenet
		'tri3_4x1x4_gap2': torch.tensor([
			[1., 0., 1., 0., -10, -10, 1., 0., 1., 0.],
			[-10, -10, -10, -10,-10,-10,-10,-10,-10,-10],
			[-10, -10, -10, -10,-10,-10,-10,-10,-10,-10],
			[1., 0., 1., 0., -10, -10, 1., 0., 1., 0.],
		]),
		'tri3_4x1x4_gap20': torch.tensor([
			[1., 0., 1., 0., -10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10, 1., 0., 1., 0.],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[1., 0., 1., 0., -10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10, 1., 0., 1., 0.],
		]),
		# for mnist
		'tri5_4x1x3_gap2': torch.tensor([
			[0.5, 0.5, 0.5, -10, -10, 0.5, 0.5, 0.5],
			[-10, -10, -10, -10,-10,-10,-10,-10],
			[-10, -10, -10, -10,-10,-10,-10,-10],
			[0.5, 0.5, 0.5, -10, -10, 0.5, 0.5, 0.5],
		]),
		'tri5_4x1x3_gap20': torch.tensor([
			[0.5, 0.5, 0.5, -10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10, 0.5, 0.5, 0.5],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10],
			[0.5, 0.5, 0.5, -10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10, 0.5, 0.5, 0.5],
		]),

		# 'tri2_1x4_bg': torch.tensor([
		# 	[1., 0., 1., 0., -10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10, 1., 0., 1., 0.],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[1., 0., 1., 0., -10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10, 1., 0., 1., 0.]
		# ]),
		# 'tri2_1x4': torch.tensor([
		# 	[-10.,-10,-10.,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10, -10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,1., 0., 1., 0.,-10.,-10,1., 0., 1., 0.,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,1., 0., 1., 0.,-10,-10, 1., 0., 1., 0.]
		# ]),
		# 'tri2_2x4': torch.tensor([
		# 	[-10.,-10,-10.,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10, -10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,0., 1., 0., 1.,-10.,-10,0., 1., 0., 1.,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,1., 0., 1., 0.,-10.,-10,1., 0., 1., 0.,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,],
		# 	[-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,-10.,-10,0., 1., 0., 1.,-10.,-10,0., 1., 0., 1.],
		# 	[-10.,-10,-10.,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,1., 0., 1., 0.,-10,-10, 1., 0., 1., 0.]
		# ]),
		
	} 
	"Just some random 2D pattern."

	x_top = 0
	"X coordinate to put the backdoor into."
	y_top = 0
	"Y coordinate to put the backdoor into."

	mask_value = -10
	"A tensor coordinate with this value won't be applied to the image."

	resize_scale = (5, 10)
	"If the pattern is dynamically placed, resize the pattern."

	mask: torch.Tensor = None
	"A mask used to combine backdoor pattern with the original image."

	pattern: torch.Tensor = None
	"A tensor of the `input.shape` filled with `mask_value` except backdoor."

	def __init__(self, task: Task, mal: tuple):
		super().__init__(task)
		self.i_mal = mal[0]
		self.n_mal = mal[1]
		self.make_pattern(self.pattern_tensor[self.params.trigger], self.x_top, self.y_top)

	def make_pattern(self, pattern_tensor, x_top, y_top):
		full_image = torch.zeros(self.params.input_shape)
		full_image.fill_(self.mask_value)

		x_bot = x_top + pattern_tensor.shape[0]
		y_bot = y_top + pattern_tensor.shape[1]

		if x_bot > self.params.input_shape[1] or \
				y_bot > self.params.input_shape[2]:
			raise ValueError(f'Position of backdoor outside image limits:'
							 f'image: {self.params.input_shape}, but backdoor'
							 f'ends at ({x_bot}, {y_bot})')

		full_image[:, x_top:x_bot, y_top:y_bot] = pattern_tensor

		self.mask = 1 * (full_image != self.mask_value).to(self.params.device)
		self.pattern = self.task.normalize(full_image).to(self.params.device)

		if self.i_mal != 0:
			self.break_trigger(x_top, x_bot, y_top, y_bot)
	
	def break_trigger(self, x_top, x_bot, y_top, y_bot):
		pattern_shape = [x_bot - x_top, y_bot - y_top]
		ori_mask = self.mask
		self.mask = torch.zeros(self.params.input_shape).to(self.params.device)
		if self.i_mal % self.n_mal == 1:
			self.mask[:, x_top : (x_top + pattern_shape[0]//2), y_top : (y_top + pattern_shape[1]//2)] = ori_mask[:, x_top : (x_top + pattern_shape[0]//2), y_top : (y_top + pattern_shape[1]//2)]
		elif self.i_mal % self.n_mal == 2:
			self.mask[:, (x_top + pattern_shape[0]//2) : x_bot, y_top : (y_top + pattern_shape[1]//2)] = ori_mask[:, (x_top + pattern_shape[0]//2) : x_bot, y_top : (y_top + pattern_shape[1]//2)]
		elif self.i_mal % self.n_mal == 3:
			self.mask[:, x_top : (x_top + pattern_shape[0]//2), (y_top + pattern_shape[1]//2) : y_bot] = ori_mask[:, x_top : (x_top + pattern_shape[0]//2), (y_top + pattern_shape[1]//2) : y_bot]
		elif self.i_mal % self.n_mal == 0:
			self.mask[:, (x_top + pattern_shape[0]//2) : x_bot, (y_top + pattern_shape[1]//2) : y_bot] = ori_mask[:, (x_top + pattern_shape[0]//2) : x_bot, (y_top + pattern_shape[1]//2) : y_bot]
		print("DBA local mask:{}:\n".format((self.i_mal,self.n_mal)),self.mask[0,x_top:x_bot,y_top:y_bot])

	def synthesize_inputs(self, batch, attack_portion=None):
		pattern, mask = self.get_pattern()
		batch.inputs[:attack_portion] = (1 - mask) * \
										batch.inputs[:attack_portion] + \
										mask * pattern
		torchvision.utils.save_image(batch.inputs[0], f'test_poison_image_local_{self.i_mal}.png')

		return

	def synthesize_labels(self, batch, attack_portion=None):
		batch.labels[:attack_portion].fill_(self.params.backdoor_label)

		return

	def get_pattern(self):
		if self.params.backdoor_dynamic_position:
			resize = random.randint(self.resize_scale[0], self.resize_scale[1])
			pattern = self.pattern_tensor
			if random.random() > 0.5:
				pattern = functional.hflip(pattern)
			image = transform_to_image(pattern)
			pattern = transform_to_tensor(
				functional.resize(image,
					resize, interpolation=0)).squeeze()

			x = random.randint(0, self.params.input_shape[1] \
							   - pattern.shape[0] - 1)
			y = random.randint(0, self.params.input_shape[2] \
							   - pattern.shape[1] - 1)
			self.make_pattern(pattern, x, y)

		return self.pattern, self.mask
